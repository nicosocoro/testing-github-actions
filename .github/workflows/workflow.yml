on:
  push:
    branches:
      - dev

name: Publish Website

env:
  PACKAGE_NAME: 'published_package'
  AZURE_WEBAPP_SOLUTION: "code/TestingGitHubActions.sln" # set this to your application's name
  AZURE_WEBAPP_PROJECT: 'code/TestingGitHubActions.Web/TestingGitHubActions.Web.csproj'
  # AZURE_WEBAPP_NAME: 'sw-devprocess-web-test'    # set this to your application's name
  AZURE_WEBAPP_PACKAGE_PATH: 'published/'          # set this to the dot net version to use

jobs:
  Build:
    # if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v2

      - name: Setup NuGet
        uses: NuGet/setup-nuget@v1.0.2

      - name: Restore NuGet packages
        run: nuget restore ${{ env.AZURE_WEBAPP_SOLUTION }}

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.0.0
        with:
          vs-version: "[16.4,16.9)"

      # - name: Run MSBuild
      #   run: msbuild ${{ env.AZURE_WEBAPP_SOLUTION }}

      - name: Build and publish to folder
        # run: msbuild ${{ env.AZURE_WEBAPP_PROJECT }} /p:Configuration=Release /p:DeployOnBuild=true /t:WebPublish /p:WebPublishMethod=FileSystem /p:publishUrl='${{ env.AZURE_WEBAPP_PACKAGE_PATH }}' /p:PackageAsSingleFile=false
        run: msbuild ${{ env.AZURE_WEBAPP_SOLUTION }} /p:Configuration=Release /p:DeployOnBuild=true /p:PackageAsSingleFile=false

      - name: Publish Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.PACKAGE_NAME }}
          path: D:/a/testing-github-actions/testing-github-actions/code/TestingGitHubActions.Web/obj/Release/Package/PackageTmp

  deploy:
      name: Deploy App - FTP
      runs-on: ubuntu-latest
      needs: Build
      steps:
        - name: Download bundle
          uses: actions/download-artifact@master
          with:
            name: ${{ env.PACKAGE_NAME }} # Download artifact named `my_artifact_name` (matches build step: Upload bundle)
            path: dist # Optional, downloads to current working directory under folder {artifact_name} if not specified

        - name: Debug Files
          run: dir dist

        - name: Upload to FTP
          uses: isthatcentered/dist-to-ftp@master
          with:
            user: ${{ secrets.FTP_USER_NAME }} # Ftp user Ex:
            password: ${{ secrets.FTP_PASSWORD }} # Ftp password Ex:
            host: ${{ secrets.FTP_HOST }} # Ftp host Ex:
            # port: ${{ secrets.FTP_PORT }} # (optional) FTP port, defaults to 21
            path: dist # Folder to deploy Ex: apps/frontend/dist or dist
            into: "/site/wwwroot/" # Where to place the files in your ftp
            cleanupExisting: true # (Optional), Remove already existing files inside FTP destination folder (`into` parameter)

  # FTP-Deploy-Action:
  #   name: FTP-Deploy-Action
  #   needs: Build
  #   runs-on: ubuntu-latest
  #   steps:

  #     # Add step to download artifacts
  #     - name: Download artifacts from Build
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: ${{ env.PACKAGE_NAME }}

  #     - name: FTP-Deploy-Action
  #       uses: SamKirkland/FTP-Deploy-Action@3.1.1
  #       with:
  #         # local-dir: "code/TestingGitHubActions.Web/"
  #         local-dir: /home/runner/work/testing-github-actions/testing-github-actions
  #         # local-dir: D:/a/testing-github-actions/testing-github-actions/code/TestingGitHubActions.Web/obj/Release/Package/PackageTmp
  #         ftp-server: "${{ secrets.FTP_SERVER }}/site/wwwroot/"
  #         ftp-username: ${{ secrets.FTP_USER_NAME }}
  #         ftp-password: ${{ secrets.FTP_PASSWORD }}